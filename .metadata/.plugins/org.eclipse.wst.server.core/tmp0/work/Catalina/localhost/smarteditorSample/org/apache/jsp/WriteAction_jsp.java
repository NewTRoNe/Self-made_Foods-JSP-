/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.29
 * Generated at: 2019-12-14 09:49:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import bbs.BbsDAO;
import java.io.FileInputStream;
import java.io.InputStream;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
import com.oreilly.servlet.MultipartRequest;
import java.io.PrintWriter;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.UUID;
import java.util.Calendar;
import com.oreilly.servlet.*;
import com.oreilly.servlet.multipart.*;

public final class WriteAction_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("com.oreilly.servlet");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("com.oreilly.servlet.multipart");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("bbs.BbsDAO");
    _jspx_imports_classes.add("com.oreilly.servlet.multipart.DefaultFileRenamePolicy");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("java.util.Map.Entry");
    _jspx_imports_classes.add("java.io.FileInputStream");
    _jspx_imports_classes.add("java.util.UUID");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
    _jspx_imports_classes.add("java.io.InputStream");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 작성자:2019.12.06개발자 -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- /작성자:2019.12.06개발자 -->\r\n");
      out.write("  \r\n");
      out.write(" \r\n");
      out.write("<!-- bbsdao의 클래스 가져옴 -->\r\n");
      out.write("\r\n");
      out.write("<!-- 자바 클래스 사용 -->\r\n");
      out.write("<!-- 작성자:2019.12.06개발자 -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!--com.oreilly의 MultipartFile클래스지원하는지 확인하기!-->\r\n");
      out.write("<!-- /작성자:2019.12.06개발자 -->\r\n");

	request.setCharacterEncoding("UTF-8");
	response.setContentType("text/html; charset=UTF-8"); //set으로쓰는습관들이세오.

      out.write("\r\n");
      out.write("<!-- 한명의 회원정보를 담는 user클래스를 자바 빈즈로 사용 / scope:페이지 현재의 페이지에서만 사용-->\r\n");
      bbs.Bbs bbs = null;
      bbs = (bbs.Bbs) _jspx_page_context.getAttribute("bbs", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (bbs == null){
        bbs = new bbs.Bbs();
        _jspx_page_context.setAttribute("bbs", bbs, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write("\r\n");
      out.write("<!-- // Bbs bbs = new Bbs(); -->\r\n");

	System.out.println(bbs);

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>jsp 게시판 웹사이트</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");


String path = application.getRealPath("/upload/");
int maxSize = 1024 * 1024 * 100; //파일의 최대크기 100mg
String encoding = "UTF-8";
DefaultFileRenamePolicy db = new DefaultFileRenamePolicy();
MultipartRequest multi = new MultipartRequest(request, path,maxSize,encoding,new DefaultFileRenamePolicy());
//사용자가 전송한 request {전송한 파일전송 토대로 우리가 만든 업로드 폴더directory에다가 maxsize만큼만 utf-8인코딩을 해 실제로 파일 업로드 할수 있게끔 해줌
String file = multi.getParameter("file");
	String fileName = multi.getOriginalFileName("file");
//사용자가 전송한 파일이라는 이름을 가진 파일에서 파라미터 값을 받아서 그 업로드 하고자 하는 파일을 파일 네임으로 지정
	String fileRealName = multi.getFilesystemName("file");
//실제로 서버에 업로드가 된  파일 시스템 네임을 가져올수 있도록 하는것
String recipeTitle = multi.getParameter("recipeTitle");
String recipeContent = multi.getParameter("recipeContent"); //변수들을 선언해서 form값들을 변수안에 저장

bbs.setRecipeTitle(recipeTitle);
bbs.setRecipeContent(recipeContent);

//new FIleDAO().upload(fileName,fileRealName);{
//FileDAO의 upload메소드가 실행이 되어서 데이터베이스에 접근을 해서 파일을 삽입해 실제 파일을 업로드 시킴
//out.write("파일명:" + fileName +" <br>");
//out.write("실제 파일명:" + fileRealName +" <br>");
//}


if(fileRealName == null)//파일이 없는경우
{
	bbs.setFileRealName("");
	bbs.setFilepath("");
}
else
{ 
	bbs.setFileRealName(fileRealName);
	bbs.setFilepath(path);
}



      out.write("\r\n");
      out.write("\r\n");
      out.write("\t");

		String userEmail = null;
		if (session.getAttribute("userEmail") != null) {//유저아이디이름으로 세션이 존재하는 회원들은 
			userEmail = (String) session.getAttribute("userEmail");//유저아이디에 해당 세션값을 넣어준다.
		}
		if (userEmail == null) {
			PrintWriter script = response.getWriter();
			script.println("<script>");
			script.println("alert('로그인을 하세요.')");
			script.println("location.href = 'Login.jsp'");
			script.println("</script>");
		} else {
			if (bbs.getRecipeContent().equals("")||bbs.getRecipeTitle().equals("")||bbs.getRecipeTitle() == null || bbs.getRecipeContent() == null) {
				PrintWriter script = response.getWriter();
				script.println("<script>");
				script.println("alert('입력이 안된 사항이 있습니다')");
				script.println("history.back()");
				script.println("</script>");
			} else {
				
				////작성자:2019.12.06개발자
				//파일이름생성
				
			
		//오류시 +"\\"삭제후 시도바람.
		
		
						//file.transferTo(new File(filePath.replaceAll(" ", "")));
						//데이터베이스에 보내야할꺼 새로운파일이름:convertuid,기존파일이름(필수X):fileRealName,파일사이즈(필수X):filesize,이미지경로:filePath
						BbsDAO bbsDAO = new BbsDAO();
						System.out.println("매개변수"+bbs.getRecipeTitle()+","+userEmail+","+bbs.getFileRealName()+","+bbs.getRecipeContent());
						//int f_result = fileDAO.upload(File.getFileName(), File.getFileRealName());
						//FIleDAO fileDAO = new FIleDAO();			
						int result = bbsDAO.write(bbs.getRecipeTitle(), userEmail,bbs.getFileRealName(),bbs.getFilepath(), bbs.getRecipeContent());//convertuid,filePath ->데이터베이스에 열이름 추가필요.
						
						if (result == -1) {
							PrintWriter script = response.getWriter();
							script.println("<script>");
							script.println("alert('글쓰기에 실패했습니다')");
							script.println("history.back()");
							script.println("</script>");
						} 
						else {
			
				////작성자:2019.12.06개발자
				
				
				////주석처리:2019.12.06개발자
/* 				BbsDAO BbsDAO = new BbsDAO();
				int result = BbsDAO.write(bbs.getRecipeTitle(), userEmail,bbs.getFileRealName(), bbs.getRecipeContent());
				if (result == -1) {
					PrintWriter script = response.getWriter();
					script.println("<script>");
					script.println("alert('글쓰기에 실패했습니다')");
					script.println("history.back()");
					script.println("</script>");
				} else {
					
					
					
				} */
				////주석처리:2019.12.06개발자
				
					PrintWriter script = response.getWriter();
					script.println("<script>");
					script.println("location.href='BBS.jsp'");
					//script.println("history.back()");
					script.println("</script>");
						}
				}
			}

		
	
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
