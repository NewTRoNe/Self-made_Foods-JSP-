package user;

import java.io.BufferedReader;
import java.io.FileReader;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.spec.X509EncodedKeySpec;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.codec.binary.Base64;

public class UserDAO {
	// dao : 데이터베이스 접근 객체의 약자로서
	// 실질적으로 db에서 회원정보 불러오거나 db에 회원정보 넣을때
	private Connection conn; // connection:db에접근하게 해주는 객체
	private PreparedStatement pstmt;
	private ResultSet rs;

	// mysql에 접속해 주는 부분
	public UserDAO() { // 생성자 실행될때마다 자동으로 db연결이 이루어 질 수 있도록함
		try {
//			String dbURL = "jdbc:mysql://localhost:3306/recipe?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
//			String dbID = "root";
//			String dbPassword = "1234";
//			Class.forName("com.mysql.jdbc.Driver");
			String dbURL = "jdbc:oracle:thin:@localhost:1521:XE";
			String dbID = "a201645006";
			String dbPassword = "manager";
			Class.forName("oracle.jdbc.driver.OracleDriver");
			conn = DriverManager.getConnection(dbURL, dbID, dbPassword);

		} catch (Exception e) {
			e.printStackTrace(); // 오류가 무엇인지 출력
		}
	}

	// 로그인을 시도하는 함수****
	public int Login(String userEmail, String userPassword) {
		String SQL = "SELECT * FROM userdb WHERE userEmail = ?";
		String hashpassword = null;
		String pwindb = null;

		//password 해시값으로 변환
		String saltstr = "salt"; // salt
		byte[] salt = saltstr.getBytes(); // byte화
		byte[] a = userPassword.getBytes();
		byte[] bytes = new byte[a.length + salt.length]; // salt와 password를 합침

		System.arraycopy(a, 0, bytes, 0, a.length);
		System.arraycopy(salt, 0, bytes, a.length, salt.length);
		try {

			try {
				MessageDigest md = MessageDigest.getInstance("SHA-256"); //sha-256을 해시함수로 사용
				md.update(bytes);

				byte[] byteData = md.digest();

				StringBuffer sb = new StringBuffer();	//해시값을 저장할 변수
				for (int i = 0; i < byteData.length; i++) {
					sb.append(Integer.toString((byteData[i] & 0xFF) + 256, 16).substring(1));
				}
				hashpassword = sb.toString(); //hashpassword에 String으로 저장
				System.out.println(hashpassword);
			} catch (NoSuchAlgorithmException e) {
				e.printStackTrace();
			}
			pstmt = conn.prepareStatement(SQL);
			// pstmt : prepared statement 정해진 sql문장을 db에 삽입하는 형식으로 인스턴스가져옴
			// sql인젝션 같은 해킹기법을 방어하는것... pstmt을 이용해 하나의 문장을 미리 준비해서(물음표사용)
			// 물음표해당하는 내용을 유저아이디로, 매개변수로 이용.. 1)존재하는지 2)비밀번호무엇인지
			pstmt.setString(1, userEmail);
			//rs:result set 에 결과보관
			rs = pstmt.executeQuery();
			//결과값이 존재한다면 while문 실행
			while (rs.next()) {
				int admincheck = rs.getInt("ADMINCHECK");	//관리자인지 확인
				System.out.println(admincheck);
				pwindb = rs.getString("userPassword");	
				System.out.println(pwindb);//DB에 저장된 패스워드 가져옴
				if (admincheck == 3) {						//관리자라면(관리자는 한층 더 강화된 보안을 위해 대칭키로 암호화)
					//서버컴퓨터에 저장된 암호키 불러오기
					BufferedReader brKey = new BufferedReader(
							new FileReader("C:/Workspace/Project/smarteditorSample/WebContent/DESKey.txt"));
					String sKey = brKey.readLine();
					// 암호키 디코딩
					byte[] bKey = Base64.decodeBase64(sKey.getBytes()); //사용 가능한 형태로 변환
					X509EncodedKeySpec SecretKey = new X509EncodedKeySpec(bKey);
					SecretKeySpec keySpec = new SecretKeySpec(SecretKey.getEncoded(), "DES");
					Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding"); //DES를 이용하여 암,복호화 준비
					cipher.init(Cipher.DECRYPT_MODE, keySpec);	//복호화 준비
					byte[] cleartext = cipher.doFinal(Base64.decodeBase64(pwindb));	//복호화를 실행하여 평문 저장
					pwindb = String.valueOf(cleartext); //pwindb에 복호화한 pw를 저장.
				}
				if (hashpassword.equals(pwindb)) { //입력된 pwssword의 해시값과 db에 저장된 pw 비교하여 옳으면
					return 1; // 라긴 성공
				} else {		//다를 시
					return 0; // 비밀번호 불일치
				}
			}
			return -1; // 아이디가 없음 오류
		} catch (Exception e) {
			e.printStackTrace();
		}
		return -2; //데이터베이스 문제 발생

	}

	public int join(User user) {
		String SQL = "INSERT INTO USERDB(userEmail, userPassword, userName, userDate) VALUES (?,?,?,?)";
		String saltstr = "salt"; // salt
		byte[] salt = saltstr.getBytes(); // byte화
		byte[] a = user.getUserPassword().getBytes();
		byte[] bytes = new byte[a.length + salt.length]; // salt와 password를 합침

		System.arraycopy(a, 0, bytes, 0, a.length);
		System.arraycopy(salt, 0, bytes, a.length, salt.length);
		
		try {
			MessageDigest md = MessageDigest.getInstance("SHA-256"); //sha-256을 해시함수로 사용
			md.update(bytes);

			byte[] byteData = md.digest();

			StringBuffer sb = new StringBuffer();	//해시값을 저장할 변수
			for (int i = 0; i < byteData.length; i++) {
				sb.append(Integer.toString((byteData[i] & 0xFF) + 256, 16).substring(1));
			}
			String hashpassword = sb.toString(); //hashpassword에 String으로 저장
			pstmt = conn.prepareStatement(SQL);
			pstmt.setString(1, user.getUserEmail());
			pstmt.setString(2, hashpassword);
			pstmt.setString(3, user.getUserName());
			pstmt.setString(4, user.getUserDate());
			return pstmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return -1; // DB 오류
	}
	
	public int Adminjoin(User user) {
		String SQL = "INSERT INTO USERDB(userEmail, userPassword, userName, userDate, adminCheck) VALUES (?,?,?,?,3)";
		String saltstr = "salt"; // salt
		byte[] salt = saltstr.getBytes(); // byte화
		byte[] a = user.getUserPassword().getBytes();
		byte[] bytes = new byte[a.length + salt.length]; // salt와 password를 합침

		System.arraycopy(a, 0, bytes, 0, a.length);
		System.arraycopy(salt, 0, bytes, a.length, salt.length);
		
		try {
			MessageDigest md = MessageDigest.getInstance("SHA-256"); //sha-256을 해시함수로 사용
			md.update(bytes);

			byte[] byteData = md.digest();

			StringBuffer sb = new StringBuffer();	//해시값을 저장할 변수
			for (int i = 0; i < byteData.length; i++) {
				sb.append(Integer.toString((byteData[i] & 0xFF) + 256, 16).substring(1));
			}
			String hashpassword = sb.toString(); //hashpassword에 String으로 저장
			BufferedReader brKey = new BufferedReader(
					new FileReader("C:/Workspace/Project/smarteditorSample/WebContent/DESKey.txt"));
			String sKey = brKey.readLine();
			// 암호키 인코딩
			byte[] bKey = Base64.decodeBase64(sKey.getBytes()); //사용 가능한 형태로 변환
			X509EncodedKeySpec SecretKey = new X509EncodedKeySpec(bKey);
			SecretKeySpec keySpec = new SecretKeySpec(SecretKey.getEncoded(), "DES");
			Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding"); //DES를 이용하여 암,복호화 준비
			cipher.init(Cipher.ENCRYPT_MODE, keySpec);	//암호화 준비
			byte[] ciphertext = cipher.doFinal(Base64.decodeBase64(hashpassword));	//복호화를 실행하여 평문 저장
			String cipherpw = String.valueOf(ciphertext); //pwindb에 복호화한 pw를 저장.
			
			pstmt = conn.prepareStatement(SQL);
			pstmt.setString(1, user.getUserEmail());
			pstmt.setString(2, hashpassword);
			pstmt.setString(3, user.getUserName());
			pstmt.setString(4, user.getUserDate());
			return pstmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return -1; // DB 오류
	}
}
